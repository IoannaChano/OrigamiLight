
OrigamiLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001f0  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  00000286  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005b7  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000430  00000000  00000000  00000903  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bd  00000000  00000000  00000d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000388  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015c  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	e1 c0       	rjmp	.+450    	; 0x1c6 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	88 c0       	rjmp	.+272    	; 0x118 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	a4 c0       	rjmp	.+328    	; 0x15a <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e0 ef       	ldi	r30, 0xF0	; 240
  24:	f1 e0       	ldi	r31, 0x01	; 1
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a5 36       	cpi	r26, 0x65	; 101
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	4d d0       	rcall	.+154    	; 0xde <main>
  44:	d3 c0       	rjmp	.+422    	; 0x1ec <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <_Z5setupv>:

volatile uint16_t secSleep = 0;

void inline setup()
{
	cli();
  48:	f8 94       	cli
	
	DDRB = 0x00;
  4a:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
  4c:	18 ba       	out	0x18, r1	; 24
	DDRB &= ~(1 << PINB1);											//I/O inputs
  4e:	b9 98       	cbi	0x17, 1	; 23
	PORTB |= 1 << PINB1;											//PULL UP RESISTOR for input
  50:	c1 9a       	sbi	0x18, 1	; 24
	
	TCCR0A |= (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);			//PWM
  52:	8f b5       	in	r24, 0x2f	; 47
  54:	83 68       	ori	r24, 0x83	; 131
  56:	8f bd       	out	0x2f, r24	; 47
	TCCR0B |= 1 << CS02;											//PWM
  58:	83 b7       	in	r24, 0x33	; 51
  5a:	84 60       	ori	r24, 0x04	; 4
  5c:	83 bf       	out	0x33, r24	; 51
	OCR0A = 0x00;
  5e:	16 be       	out	0x36, r1	; 54
	TIMSK0 |= 1 << TOIE0;											//Timer0 overflow interrupt
  60:	89 b7       	in	r24, 0x39	; 57
  62:	82 60       	ori	r24, 0x02	; 2
  64:	89 bf       	out	0x39, r24	; 57
	MCUCR |= (1 << SM1) | (1 << SE);								//Sleep mode selection
  66:	85 b7       	in	r24, 0x35	; 53
  68:	80 63       	ori	r24, 0x30	; 48
  6a:	85 bf       	out	0x35, r24	; 53
	//MCUCR |= (1 << ISC00);											//INT0 interrupt type
	
	MCUSR = 0;														//Watchdog settings
  6c:	14 be       	out	0x34, r1	; 52
	WDTCR = (1<<WDCE)|(1<<WDE);
  6e:	88 e1       	ldi	r24, 0x18	; 24
  70:	81 bd       	out	0x21, r24	; 33
	WDTCR = (1<<WDTIE) | (1<<WDP3) | (1<<WDP0);
  72:	81 e6       	ldi	r24, 0x61	; 97
  74:	81 bd       	out	0x21, r24	; 33
	
	sei();
  76:	78 94       	sei
  78:	08 95       	ret

0000007a <_Z5sleepv>:
}

void sleep()
{
	secSleep = 0;
  7a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <secSleep+0x1>
  7e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <secSleep>
	GIMSK |= 1 << INT0;			//Enable external interrupt for awakening
  82:	8b b7       	in	r24, 0x3b	; 59
  84:	80 64       	ori	r24, 0x40	; 64
  86:	8b bf       	out	0x3b, r24	; 59
	sleep_mode();
  88:	85 b7       	in	r24, 0x35	; 53
  8a:	80 62       	ori	r24, 0x20	; 32
  8c:	85 bf       	out	0x35, r24	; 53
  8e:	88 95       	sleep
  90:	85 b7       	in	r24, 0x35	; 53
  92:	8f 7d       	andi	r24, 0xDF	; 223
  94:	85 bf       	out	0x35, r24	; 53
  96:	08 95       	ret

00000098 <_Z6rampUPv>:
}

void rampUP()
{
	DDRB |= 1 << PINB0;
  98:	b8 9a       	sbi	0x17, 0	; 23
	while (OCR0A < 0xff)
  9a:	86 b7       	in	r24, 0x36	; 54
  9c:	8f 3f       	cpi	r24, 0xFF	; 255
  9e:	61 f0       	breq	.+24     	; 0xb8 <__stack+0x19>
	{
		OCR0A++;
  a0:	86 b7       	in	r24, 0x36	; 54
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	9c e7       	ldi	r25, 0x7C	; 124
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <__stack+0xb>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <__stack+0x11>
  b0:	00 00       	nop
}

void rampUP()
{
	DDRB |= 1 << PINB0;
	while (OCR0A < 0xff)
  b2:	86 b7       	in	r24, 0x36	; 54
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	a1 f7       	brne	.-24     	; 0xa0 <__stack+0x1>
  b8:	08 95       	ret

000000ba <_Z8rampDOWNv>:
	}
}

void rampDOWN()
{
	while (OCR0A > 0x00)
  ba:	86 b7       	in	r24, 0x36	; 54
  bc:	88 23       	and	r24, r24
  be:	61 f0       	breq	.+24     	; 0xd8 <_Z8rampDOWNv+0x1e>
	{
		OCR0A--;
  c0:	86 b7       	in	r24, 0x36	; 54
  c2:	81 50       	subi	r24, 0x01	; 1
  c4:	86 bf       	out	0x36, r24	; 54
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	9c e7       	ldi	r25, 0x7C	; 124
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <_Z8rampDOWNv+0x10>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_Z8rampDOWNv+0x16>
  d0:	00 00       	nop
	}
}

void rampDOWN()
{
	while (OCR0A > 0x00)
  d2:	86 b7       	in	r24, 0x36	; 54
  d4:	81 11       	cpse	r24, r1
  d6:	f4 cf       	rjmp	.-24     	; 0xc0 <_Z8rampDOWNv+0x6>
	{
		OCR0A--;
		_delay_ms(16);
	}
	DDRB &= ~(1 << PINB0);
  d8:	b8 98       	cbi	0x17, 0	; 23
	sleep();
  da:	cf df       	rcall	.-98     	; 0x7a <_Z5sleepv>
  dc:	08 95       	ret

000000de <main>:
	GIMSK &= ~(1 << INT0);		//Disable external interrupt INT0
}

int main(void)
{
	setup();
  de:	b4 df       	rcall	.-152    	; 0x48 <_Z5setupv>
	sei();
  e0:	78 94       	sei
	sleep();
  e2:	cb df       	rcall	.-106    	; 0x7a <_Z5sleepv>
    while (1)
    {
		if (secSleep <= 60) rampUP();
  e4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <secSleep>
  e8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <secSleep+0x1>
  ec:	cd 97       	sbiw	r24, 0x3d	; 61
  ee:	08 f4       	brcc	.+2      	; 0xf2 <main+0x14>
  f0:	d3 df       	rcall	.-90     	; 0x98 <_Z6rampUPv>
		if (secSleep > 5)
  f2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <secSleep>
  f6:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <secSleep+0x1>
  fa:	06 97       	sbiw	r24, 0x06	; 6
  fc:	20 f0       	brcs	.+8      	; 0x106 <main+0x28>
	sleep();
}

inline void seINT0()
{
	GIFR = 0;
  fe:	1a be       	out	0x3a, r1	; 58
	GIMSK |= 1 << INT0;			//Enable external interrupt INT0 to look for movement of tilt sensor
 100:	8b b7       	in	r24, 0x3b	; 59
 102:	80 64       	ori	r24, 0x40	; 64
 104:	8b bf       	out	0x3b, r24	; 59
		if (secSleep <= 60) rampUP();
		if (secSleep > 5)
		{
			seINT0();
		}
		if (secSleep > 60)
 106:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <secSleep>
 10a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <secSleep+0x1>
 10e:	cd 97       	sbiw	r24, 0x3d	; 61
 110:	48 f3       	brcs	.-46     	; 0xe4 <main+0x6>
		{
			rampDOWN();
 112:	d3 df       	rcall	.-90     	; 0xba <_Z8rampDOWNv>
			sleep();
 114:	b2 df       	rcall	.-156    	; 0x7a <_Z5sleepv>
 116:	e6 cf       	rjmp	.-52     	; 0xe4 <main+0x6>

00000118 <__vector_3>:
		}
    }
}

ISR (TIM0_OVF_vect) //Timer 0 overflow interrupt used for all the timing needs
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
	static uint8_t smallTimer = 0; 
	smallTimer++;
 126:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
	if (smallTimer > 122)	//This if is entered once every second
 12c:	8b 37       	cpi	r24, 0x7B	; 123
 12e:	18 f4       	brcc	.+6      	; 0x136 <__vector_3+0x1e>
}

ISR (TIM0_OVF_vect) //Timer 0 overflow interrupt used for all the timing needs
{
	static uint8_t smallTimer = 0; 
	smallTimer++;
 130:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 134:	0b c0       	rjmp	.+22     	; 0x14c <__vector_3+0x34>
	if (smallTimer > 122)	//This if is entered once every second
	{
		smallTimer = 0;
 136:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		secSleep++;
 13a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <secSleep>
 13e:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <secSleep+0x1>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <secSleep+0x1>
 148:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <secSleep>
		//DDRB ^= 1 << PINB0; //Debugging
	}
}
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_8>:

ISR (WDT_vect) //WDT interrupt to wake from sleep and check brightness once every 8sec
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
	volatile static uint8_t lightTimes = 4; //How many times light has been detected
	
	WDTCR |= (1<<WDTIE);
 168:	81 b5       	in	r24, 0x21	; 33
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	81 bd       	out	0x21, r24	; 33
	
	if (!OCR0A) secSleep = 100;
 16e:	86 b7       	in	r24, 0x36	; 54
 170:	81 11       	cpse	r24, r1
 172:	22 c0       	rjmp	.+68     	; 0x1b8 <__vector_8+0x5e>
 174:	84 e6       	ldi	r24, 0x64	; 100
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <secSleep+0x1>
 17c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <secSleep>
	else return;
	
	if (PINB & (1 << PINB2))
 180:	b2 9b       	sbis	0x16, 2	; 22
 182:	0a c0       	rjmp	.+20     	; 0x198 <__vector_8+0x3e>
	{
		if (lightTimes < 4) lightTimes++;
 184:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 188:	84 30       	cpi	r24, 0x04	; 4
 18a:	b0 f4       	brcc	.+44     	; 0x1b8 <__vector_8+0x5e>
 18c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 190:	8f 5f       	subi	r24, 0xFF	; 255
 192:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 196:	10 c0       	rjmp	.+32     	; 0x1b8 <__vector_8+0x5e>
	}
	else if (lightTimes >= 4)
 198:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19c:	84 30       	cpi	r24, 0x04	; 4
 19e:	60 f0       	brcs	.+24     	; 0x1b8 <__vector_8+0x5e>
	{
		lightTimes = 0;
 1a0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		secSleep = 45;
 1a4:	8d e2       	ldi	r24, 0x2D	; 45
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <secSleep+0x1>
 1ac:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <secSleep>
	sleep();
}

inline void seINT0()
{
	GIFR = 0;
 1b0:	1a be       	out	0x3a, r1	; 58
	GIMSK |= 1 << INT0;			//Enable external interrupt INT0 to look for movement of tilt sensor
 1b2:	8b b7       	in	r24, 0x3b	; 59
 1b4:	80 64       	ori	r24, 0x40	; 64
 1b6:	8b bf       	out	0x3b, r24	; 59
	{
		lightTimes = 0;
		secSleep = 45;
		seINT0();
	}
}
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_1>:

ISR (INT0_vect) //External interrupt used to wake from sleep
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	8f 93       	push	r24
	GIMSK |= 1 << INT0;			//Enable external interrupt INT0 to look for movement of tilt sensor
}

inline void clINT0()
{
	GIMSK &= ~(1 << INT0);		//Disable external interrupt INT0
 1d2:	8b b7       	in	r24, 0x3b	; 59
 1d4:	8f 7b       	andi	r24, 0xBF	; 191
 1d6:	8b bf       	out	0x3b, r24	; 59
}

ISR (INT0_vect) //External interrupt used to wake from sleep
{
	clINT0();
	secSleep = 0;
 1d8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <secSleep+0x1>
 1dc:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <secSleep>
}
 1e0:	8f 91       	pop	r24
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
