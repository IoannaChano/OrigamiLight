
OrigamiLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001c6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  0000025c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005ae  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000041f  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b7  00000000  00000000  00000ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037b  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000142  00000000  00000000  000014e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001625  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	cd c0       	rjmp	.+410    	; 0x1a0 <__vector_2>
   6:	81 c0       	rjmp	.+258    	; 0x10a <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	97 c0       	rjmp	.+302    	; 0x140 <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e6 ec       	ldi	r30, 0xC6	; 198
  24:	f1 e0       	ldi	r31, 0x01	; 1
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a3 36       	cpi	r26, 0x63	; 99
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	4e d0       	rcall	.+156    	; 0xe0 <main>
  44:	be c0       	rjmp	.+380    	; 0x1c2 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <_Z5setupv>:

volatile uint8_t secSleep = 100;	//This variable is incremented once every second when the light is ON. When it reaches a threshold, the light goes to sleep

void inline setup()
{
	cli();
  48:	f8 94       	cli
	
	DDRB = 0x00;
  4a:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
  4c:	18 ba       	out	0x18, r1	; 24
	DDRB &= ~(1 << PINB1);											//I/O inputs
  4e:	b9 98       	cbi	0x17, 1	; 23
	PORTB |= 1 << PINB1;											//PULL UP RESISTOR for input
  50:	c1 9a       	sbi	0x18, 1	; 24
	
	TCCR0A |= (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);			//PWM
  52:	8f b5       	in	r24, 0x2f	; 47
  54:	83 68       	ori	r24, 0x83	; 131
  56:	8f bd       	out	0x2f, r24	; 47
	TCCR0B |= 1 << CS02;											//PWM
  58:	83 b7       	in	r24, 0x33	; 51
  5a:	84 60       	ori	r24, 0x04	; 4
  5c:	83 bf       	out	0x33, r24	; 51
	OCR0A = 0x00;
  5e:	16 be       	out	0x36, r1	; 54
	TIMSK0 |= 1 << TOIE0;											//Timer0 overflow interrupt
  60:	89 b7       	in	r24, 0x39	; 57
  62:	82 60       	ori	r24, 0x02	; 2
  64:	89 bf       	out	0x39, r24	; 57
	MCUCR |= (1 << SM1) | (1 << SE);								//Sleep mode selection
  66:	85 b7       	in	r24, 0x35	; 53
  68:	80 63       	ori	r24, 0x30	; 48
  6a:	85 bf       	out	0x35, r24	; 53
	PCMSK |= (1 << PCINT1);											//Pin change mask
  6c:	a9 9a       	sbi	0x15, 1	; 21
	
	MCUSR = 0;														//Watchdog settings
  6e:	14 be       	out	0x34, r1	; 52
	WDTCR = (1<<WDCE)|(1<<WDE);
  70:	88 e1       	ldi	r24, 0x18	; 24
  72:	81 bd       	out	0x21, r24	; 33
	WDTCR = (1<<WDTIE) | (1<<WDP3) | (1<<WDP0);
  74:	81 e6       	ldi	r24, 0x61	; 97
  76:	81 bd       	out	0x21, r24	; 33
	
	sei();
  78:	78 94       	sei
  7a:	08 95       	ret

0000007c <_Z6rampUPv>:
}

void rampUP()					//Dims the light up
{
	DDRB |= 1 << PINB0;			//Sets PINB0 as output
  7c:	b8 9a       	sbi	0x17, 0	; 23
	while (OCR0A < 0xff)
  7e:	86 b7       	in	r24, 0x36	; 54
  80:	8f 3f       	cpi	r24, 0xFF	; 255
  82:	61 f0       	breq	.+24     	; 0x9c <_Z6rampUPv+0x20>
	{
		OCR0A++;				//Increments PWM
  84:	86 b7       	in	r24, 0x36	; 54
  86:	8f 5f       	subi	r24, 0xFF	; 255
  88:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	9c e7       	ldi	r25, 0x7C	; 124
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <_Z6rampUPv+0x12>
  92:	00 c0       	rjmp	.+0      	; 0x94 <_Z6rampUPv+0x18>
  94:	00 00       	nop
}

void rampUP()					//Dims the light up
{
	DDRB |= 1 << PINB0;			//Sets PINB0 as output
	while (OCR0A < 0xff)
  96:	86 b7       	in	r24, 0x36	; 54
  98:	8f 3f       	cpi	r24, 0xFF	; 255
  9a:	a1 f7       	brne	.-24     	; 0x84 <_Z6rampUPv+0x8>
  9c:	08 95       	ret

0000009e <_Z8rampDOWNv>:
	}
}

void rampDOWN()					//Dims the light down
{
	while (OCR0A > 0x00)
  9e:	86 b7       	in	r24, 0x36	; 54
  a0:	88 23       	and	r24, r24
  a2:	61 f0       	breq	.+24     	; 0xbc <__stack+0x1d>
	{
		OCR0A--;				//Decrements PWM
  a4:	86 b7       	in	r24, 0x36	; 54
  a6:	81 50       	subi	r24, 0x01	; 1
  a8:	86 bf       	out	0x36, r24	; 54
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	9c e7       	ldi	r25, 0x7C	; 124
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <__stack+0xf>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <__stack+0x15>
  b4:	00 00       	nop
	}
}

void rampDOWN()					//Dims the light down
{
	while (OCR0A > 0x00)
  b6:	86 b7       	in	r24, 0x36	; 54
  b8:	81 11       	cpse	r24, r1
  ba:	f4 cf       	rjmp	.-24     	; 0xa4 <__stack+0x5>
	{
		OCR0A--;				//Decrements PWM
		_delay_ms(16);			//Pauses for 16ms each time for a total of 255 * 16ms = 4080ms or 4.080sec for dimming to the lowest brightness and exitig the loop
	}
	DDRB &= ~(1 << PINB0);		//Sets PINB0 as input effectively turning off the light completely
  bc:	b8 98       	cbi	0x17, 0	; 23
  be:	08 95       	ret

000000c0 <_Z5sleepv>:
	GIMSK &= ~(1 << PCIE);		//Clear pin change interrupt enable bit
}

void sleep()
{
	secSleep = 0;
  c0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <secSleep>
	DDRB &= ~(1 << PINB0);		//Sets PINB0 as input effectively turning off the light completely
}

inline void sePCI()				//Enable pin change interrupt to look for movement of tilt sensor
{
	GIFR &= ~(1 << PCIF);		//Clears pin change interrupt flag
  c4:	8a b7       	in	r24, 0x3a	; 58
  c6:	8f 7d       	andi	r24, 0xDF	; 223
  c8:	8a bf       	out	0x3a, r24	; 58
	GIMSK |= 1 << PCIE;			//Set pin change interrupt enable bit
  ca:	8b b7       	in	r24, 0x3b	; 59
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	8b bf       	out	0x3b, r24	; 59

void sleep()
{
	secSleep = 0;
	sePCI();					//Enable pin change interrupt for awakening by reading tile sensor
	sleep_mode();
  d0:	85 b7       	in	r24, 0x35	; 53
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	85 bf       	out	0x35, r24	; 53
  d6:	88 95       	sleep
  d8:	85 b7       	in	r24, 0x35	; 53
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	85 bf       	out	0x35, r24	; 53
  de:	08 95       	ret

000000e0 <main>:
}

int main(void)
{
	setup();								//Setting up registers
  e0:	b3 df       	rcall	.-154    	; 0x48 <_Z5setupv>
	sleep();								//Immediately enter sleep - wake up sources WATCHDOG ISR and PIN CHANGE INTERRUPT
  e2:	ee df       	rcall	.-36     	; 0xc0 <_Z5sleepv>
    while (1)
    {
		if (secSleep <= tiltONtime) 				//When secSleep is less than 60 light is ramped up
  e4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <secSleep>
  e8:	8d 33       	cpi	r24, 0x3D	; 61
  ea:	10 f4       	brcc	.+4      	; 0xf0 <main+0x10>
		{
			rampUP();
  ec:	c7 df       	rcall	.-114    	; 0x7c <_Z6rampUPv>
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <main+0x14>
		}
		else										//When secSleep exceeds 60 sec, the light is deemed down and the chip goes to sleep
		{
			rampDOWN();
  f0:	d6 df       	rcall	.-84     	; 0x9e <_Z8rampDOWNv>
			sleep();
  f2:	e6 df       	rcall	.-52     	; 0xc0 <_Z5sleepv>
		}
		if (secSleep > 5)							//When secSleep is more than 5, pin change interrupt is re-enabled so that if someone picks up the origami, it will be detected by the tilt sensor and the on-time will increase
  f4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <secSleep>
  f8:	86 30       	cpi	r24, 0x06	; 6
  fa:	a0 f3       	brcs	.-24     	; 0xe4 <main+0x4>
	DDRB &= ~(1 << PINB0);		//Sets PINB0 as input effectively turning off the light completely
}

inline void sePCI()				//Enable pin change interrupt to look for movement of tilt sensor
{
	GIFR &= ~(1 << PCIF);		//Clears pin change interrupt flag
  fc:	8a b7       	in	r24, 0x3a	; 58
  fe:	8f 7d       	andi	r24, 0xDF	; 223
 100:	8a bf       	out	0x3a, r24	; 58
	GIMSK |= 1 << PCIE;			//Set pin change interrupt enable bit
 102:	8b b7       	in	r24, 0x3b	; 59
 104:	80 62       	ori	r24, 0x20	; 32
 106:	8b bf       	out	0x3b, r24	; 59
 108:	ed cf       	rjmp	.-38     	; 0xe4 <main+0x4>

0000010a <__vector_3>:
		}
    }
}

ISR (TIM0_OVF_vect)							//Timer 0 overflow interrupt used for all the timing needs. The prescalre is set to CLOCK/256. This ISR is called approximately 122 times a second
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
	static uint8_t smallTimer = 0;			//The small timer is incremented 122 times to make up one second
	
	smallTimer++;
 116:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 11a:	8f 5f       	subi	r24, 0xFF	; 255
	if (smallTimer > 122)					//This if is entered once every second
 11c:	8b 37       	cpi	r24, 0x7B	; 123
 11e:	18 f4       	brcc	.+6      	; 0x126 <__vector_3+0x1c>

ISR (TIM0_OVF_vect)							//Timer 0 overflow interrupt used for all the timing needs. The prescalre is set to CLOCK/256. This ISR is called approximately 122 times a second
{
	static uint8_t smallTimer = 0;			//The small timer is incremented 122 times to make up one second
	
	smallTimer++;
 120:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 124:	07 c0       	rjmp	.+14     	; 0x134 <__vector_3+0x2a>
	if (smallTimer > 122)					//This if is entered once every second
	{
		smallTimer = 0;
 126:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		secSleep++;							//secSleep is incremented once a second when the chip is not sleeping
 12a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <secSleep>
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <secSleep>
		//DDRB ^= 1 << PINB0;				//Debugging
	}
}
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_8>:

ISR (WDT_vect)									//WDT interrupt to wake from sleep and check brightness once every 8sec
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
	volatile static uint8_t lightTimes = 10;	//How many times light has been detected
	
	WDTCR |= (1<<WDTIE);						//The watchdog timer interrupt enable bit should be written to 1 every time the watchdog ISR executes. If a watchdog timer overflow occurs and this bit is not set, the chip will reset
 14c:	81 b5       	in	r24, 0x21	; 33
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	81 bd       	out	0x21, r24	; 33
	//DDRB ^= 1 << PINB0; //Debugging
	
	if (!OCR0A) secSleep = 100;					//If the light is off, the secSleep is assigned a value greater than the threshold (in this case the threshold is chosen to be 60 in main)
 152:	86 b7       	in	r24, 0x36	; 54
 154:	81 11       	cpse	r24, r1
 156:	1e c0       	rjmp	.+60     	; 0x194 <__vector_8+0x54>
 158:	84 e6       	ldi	r24, 0x64	; 100
 15a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <secSleep>
	else return;								//If the light is on, no commands are executed and the routine returns
	
	if (PINB & (1 << PINB2))					//If there photoresistor detects light
 15e:	b2 9b       	sbis	0x16, 2	; 22
 160:	0a c0       	rjmp	.+20     	; 0x176 <__vector_8+0x36>
	{
		if (lightTimes < 10) lightTimes++;		//The lightTimes is incremented until it reaches 10
 162:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 166:	8a 30       	cpi	r24, 0x0A	; 10
 168:	a8 f4       	brcc	.+42     	; 0x194 <__vector_8+0x54>
 16a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 174:	0f c0       	rjmp	.+30     	; 0x194 <__vector_8+0x54>
	}
	else if (lightTimes >= 10)					//If there photoresistor detects light and there have already been 10 instances of light
 176:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 17a:	8a 30       	cpi	r24, 0x0A	; 10
 17c:	58 f0       	brcs	.+22     	; 0x194 <__vector_8+0x54>
	{
		lightTimes = 0;							//The lightTimes is set to 0 so that the light will not keep turning when in the dark
 17e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
		secSleep = tiltONtime - darknessONtime;	//secSleep is set so that the light will sleep after 15"
 182:	8d e2       	ldi	r24, 0x2D	; 45
 184:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <secSleep>
	DDRB &= ~(1 << PINB0);		//Sets PINB0 as input effectively turning off the light completely
}

inline void sePCI()				//Enable pin change interrupt to look for movement of tilt sensor
{
	GIFR &= ~(1 << PCIF);		//Clears pin change interrupt flag
 188:	8a b7       	in	r24, 0x3a	; 58
 18a:	8f 7d       	andi	r24, 0xDF	; 223
 18c:	8a bf       	out	0x3a, r24	; 58
	GIMSK |= 1 << PCIE;			//Set pin change interrupt enable bit
 18e:	8b b7       	in	r24, 0x3b	; 59
 190:	80 62       	ori	r24, 0x20	; 32
 192:	8b bf       	out	0x3b, r24	; 59
	{
		lightTimes = 0;							//The lightTimes is set to 0 so that the light will not keep turning when in the dark
		secSleep = tiltONtime - darknessONtime;	//secSleep is set so that the light will sleep after 15"
		sePCI();								//Pin change interrupt is activated so that if someone picks up the origami, it will be detected by the tilt sensor and the on-time will increase
	}
}
 194:	8f 91       	pop	r24
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_2>:

ISR (PCINT0_vect)								//Pin change interrupt used to read the tilt sensor, wake from sleep and extend ON time
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
	GIMSK |= 1 << PCIE;			//Set pin change interrupt enable bit
}

inline void clPCI()				//Disables pin change interrupt
{
	GIMSK &= ~(1 << PCIE);		//Clear pin change interrupt enable bit
 1ac:	8b b7       	in	r24, 0x3b	; 59
 1ae:	8f 7d       	andi	r24, 0xDF	; 223
 1b0:	8b bf       	out	0x3b, r24	; 59
}

ISR (PCINT0_vect)								//Pin change interrupt used to read the tilt sensor, wake from sleep and extend ON time
{
	clPCI();									//When the pin change ISR is called, it disables itself with this command. It is then re-enabled in various locations in the code
	secSleep = 0;								//Every time the tilt sensor is triggered, the ON time is extended to the maximum (60" chosen as default)
 1b2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <secSleep>
}
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
