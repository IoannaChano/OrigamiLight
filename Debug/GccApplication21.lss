
GccApplication21.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002c6  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000644  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000467  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046a  00000000  00000000  00000ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039e  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026d  00000000  00000000  000017ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001a57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	55 c1       	rjmp	.+682    	; 0x2ae <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	ef c0       	rjmp	.+478    	; 0x1e6 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	14 c1       	rjmp	.+552    	; 0x23a <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e6 ec       	ldi	r30, 0xC6	; 198
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 36       	cpi	r26, 0x68	; 104
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	aa d0       	rcall	.+340    	; 0x198 <main>
  44:	3e c1       	rjmp	.+636    	; 0x2c2 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <_Z5setupv>:
volatile uint16_t secSleep = 0;
	

inline void setup()
{
	DDRB = 0x00;
  48:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
  4a:	18 ba       	out	0x18, r1	; 24
	DDRB &= ~(1 << PINB1) && ~(1 << PINB2);											//I/O inputs
  4c:	87 b3       	in	r24, 0x17	; 23
  4e:	81 70       	andi	r24, 0x01	; 1
  50:	87 bb       	out	0x17, r24	; 23
	PORTB |= 1 << PINB1;											//PULL UP RESISTOR for input
  52:	c1 9a       	sbi	0x18, 1	; 24
	
	TCCR0A |= (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);			//PWM
  54:	8f b5       	in	r24, 0x2f	; 47
  56:	83 68       	ori	r24, 0x83	; 131
  58:	8f bd       	out	0x2f, r24	; 47
	TCCR0B |= 1 << CS02;											//PWM
  5a:	83 b7       	in	r24, 0x33	; 51
  5c:	84 60       	ori	r24, 0x04	; 4
  5e:	83 bf       	out	0x33, r24	; 51
	TIMSK0 |= 1 << TOIE0;											//Timer0 overflow interrupt
  60:	89 b7       	in	r24, 0x39	; 57
  62:	82 60       	ori	r24, 0x02	; 2
  64:	89 bf       	out	0x39, r24	; 57
	MCUCR |= (1 << SM1) | (1 << SE);								//Sleep mode selection
  66:	85 b7       	in	r24, 0x35	; 53
  68:	80 63       	ori	r24, 0x30	; 48
  6a:	85 bf       	out	0x35, r24	; 53
	
	WDTCR |= 1 << WDCE;												//Watchdog settings
  6c:	81 b5       	in	r24, 0x21	; 33
  6e:	80 61       	ori	r24, 0x10	; 16
  70:	81 bd       	out	0x21, r24	; 33
	WDTCR |= (1 << WDP3) || (1 << WDP0);
  72:	81 b5       	in	r24, 0x21	; 33
  74:	81 60       	ori	r24, 0x01	; 1
  76:	81 bd       	out	0x21, r24	; 33
	WDTCR |= (1 << WDTIE);
  78:	81 b5       	in	r24, 0x21	; 33
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	81 bd       	out	0x21, r24	; 33
  7e:	08 95       	ret

00000080 <_Z13sensorFlippedv>:
	static uint8_t sensorIns = 0x00;
	static uint8_t i = 0;
	static bool sensorPos = 1;
	uint8_t sum = 0;
	
	if (PINB & (1 << PINB1))
  80:	b1 9b       	sbis	0x16, 1	; 22
  82:	0f c0       	rjmp	.+30     	; 0xa2 <__stack+0x3>
	{
		sensorIns |= 1 << i;
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	00 90 64 00 	lds	r0, 0x0064	; 0x800064 <_ZZ13sensorFlippedvE1i>
  8c:	02 c0       	rjmp	.+4      	; 0x92 <_Z13sensorFlippedv+0x12>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	0a 94       	dec	r0
  94:	e2 f7       	brpl	.-8      	; 0x8e <_Z13sensorFlippedv+0xe>
  96:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <_ZZ13sensorFlippedvE9sensorIns>
  9a:	89 2b       	or	r24, r25
  9c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_ZZ13sensorFlippedvE9sensorIns>
  a0:	0f c0       	rjmp	.+30     	; 0xc0 <__stack+0x21>
	}
	else
	{
		sensorIns &= ~(1 << i);
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	00 90 64 00 	lds	r0, 0x0064	; 0x800064 <_ZZ13sensorFlippedvE1i>
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__stack+0x11>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <__stack+0xd>
  b4:	80 95       	com	r24
  b6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <_ZZ13sensorFlippedvE9sensorIns>
  ba:	89 23       	and	r24, r25
  bc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_ZZ13sensorFlippedvE9sensorIns>
	}
	i < 7? i++ : i=0;
  c0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZZ13sensorFlippedvE1i>
  c4:	87 30       	cpi	r24, 0x07	; 7
  c6:	20 f4       	brcc	.+8      	; 0xd0 <__stack+0x31>
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZZ13sensorFlippedvE1i>
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__stack+0x35>
  d0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZZ13sensorFlippedvE1i>
	
	for (uint8_t j=0; j<8; ++j)
	{
		sum += (sensorIns >> j) & 0x01;
  d4:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <_ZZ13sensorFlippedvE9sensorIns>
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
bool sensorFlipped()												//Gets a new sensor sample and checks if it is flipped through rolling mean
{
	static uint8_t sensorIns = 0x00;
	static uint8_t i = 0;
	static bool sensorPos = 1;
	uint8_t sum = 0;
  de:	40 e0       	ldi	r20, 0x00	; 0
	}
	i < 7? i++ : i=0;
	
	for (uint8_t j=0; j<8; ++j)
	{
		sum += (sensorIns >> j) & 0x01;
  e0:	9b 01       	movw	r18, r22
  e2:	08 2e       	mov	r0, r24
  e4:	02 c0       	rjmp	.+4      	; 0xea <__stack+0x4b>
  e6:	35 95       	asr	r19
  e8:	27 95       	ror	r18
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <__stack+0x47>
  ee:	21 70       	andi	r18, 0x01	; 1
  f0:	42 0f       	add	r20, r18
  f2:	01 96       	adiw	r24, 0x01	; 1
	{
		sensorIns &= ~(1 << i);
	}
	i < 7? i++ : i=0;
	
	for (uint8_t j=0; j<8; ++j)
  f4:	88 30       	cpi	r24, 0x08	; 8
  f6:	91 05       	cpc	r25, r1
  f8:	99 f7       	brne	.-26     	; 0xe0 <__stack+0x41>
	{
		sum += (sensorIns >> j) & 0x01;
	}
	
	if ((sensorPos && sum<3) || (!sensorPos && sum>6))
  fa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_ZZ13sensorFlippedvE9sensorPos>
  fe:	88 23       	and	r24, r24
 100:	21 f0       	breq	.+8      	; 0x10a <__stack+0x6b>
 102:	43 30       	cpi	r20, 0x03	; 3
 104:	20 f0       	brcs	.+8      	; 0x10e <__stack+0x6f>
	{
		sensorPos = !sensorPos;
		return true;
	}
	else
		return false;
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret
	for (uint8_t j=0; j<8; ++j)
	{
		sum += (sensorIns >> j) & 0x01;
	}
	
	if ((sensorPos && sum<3) || (!sensorPos && sum>6))
 10a:	47 30       	cpi	r20, 0x07	; 7
 10c:	28 f0       	brcs	.+10     	; 0x118 <__stack+0x79>
	{
		sensorPos = !sensorPos;
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	89 27       	eor	r24, r25
 112:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <_ZZ13sensorFlippedvE9sensorPos>
		return true;
 116:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return false;
}
 118:	08 95       	ret

0000011a <_Z5sleepv>:

void sleep()
{
	secSleep = 0;
 11a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <secSleep+0x1>
 11e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <secSleep>
	GIMSK |= 1 << INT0;			//Enable external interrupt for awakening
 122:	8b b7       	in	r24, 0x3b	; 59
 124:	80 64       	ori	r24, 0x40	; 64
 126:	8b bf       	out	0x3b, r24	; 59
	sleep_mode();
 128:	85 b7       	in	r24, 0x35	; 53
 12a:	80 62       	ori	r24, 0x20	; 32
 12c:	85 bf       	out	0x35, r24	; 53
 12e:	88 95       	sleep
 130:	85 b7       	in	r24, 0x35	; 53
 132:	8f 7d       	andi	r24, 0xDF	; 223
 134:	85 bf       	out	0x35, r24	; 53
	GIMSK &= ~(1 << INT0);		//Disable external interrupt after awakening
 136:	8b b7       	in	r24, 0x3b	; 59
 138:	8f 7b       	andi	r24, 0xBF	; 191
 13a:	8b bf       	out	0x3b, r24	; 59
 13c:	08 95       	ret

0000013e <_Z6rampUPv>:
}

void rampUP()
{
	WDTCR &= ~(1 << WDTIE);
 13e:	81 b5       	in	r24, 0x21	; 33
 140:	8f 7b       	andi	r24, 0xBF	; 191
 142:	81 bd       	out	0x21, r24	; 33
	cli();
 144:	f8 94       	cli
	DDRB |= 1 << PINB0;
 146:	b8 9a       	sbi	0x17, 0	; 23
	while (OCR0A < 0xff)
 148:	86 b7       	in	r24, 0x36	; 54
 14a:	8f 3f       	cpi	r24, 0xFF	; 255
 14c:	61 f0       	breq	.+24     	; 0x166 <_Z6rampUPv+0x28>
	{
		OCR0A++;
 14e:	86 b7       	in	r24, 0x36	; 54
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	9c e7       	ldi	r25, 0x7C	; 124
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <_Z6rampUPv+0x1a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <_Z6rampUPv+0x20>
 15e:	00 00       	nop
void rampUP()
{
	WDTCR &= ~(1 << WDTIE);
	cli();
	DDRB |= 1 << PINB0;
	while (OCR0A < 0xff)
 160:	86 b7       	in	r24, 0x36	; 54
 162:	8f 3f       	cpi	r24, 0xFF	; 255
 164:	a1 f7       	brne	.-24     	; 0x14e <_Z6rampUPv+0x10>
	{
		OCR0A++;
		_delay_ms(16);
	}
	sei();
 166:	78 94       	sei
 168:	08 95       	ret

0000016a <_Z8rampDOWNv>:
}

void rampDOWN()
{
	cli();
 16a:	f8 94       	cli
	while (OCR0A > 0x00)
 16c:	86 b7       	in	r24, 0x36	; 54
 16e:	88 23       	and	r24, r24
 170:	61 f0       	breq	.+24     	; 0x18a <_Z8rampDOWNv+0x20>
	{
		OCR0A--;
 172:	86 b7       	in	r24, 0x36	; 54
 174:	81 50       	subi	r24, 0x01	; 1
 176:	86 bf       	out	0x36, r24	; 54
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	9c e7       	ldi	r25, 0x7C	; 124
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <_Z8rampDOWNv+0x12>
 180:	00 c0       	rjmp	.+0      	; 0x182 <_Z8rampDOWNv+0x18>
 182:	00 00       	nop
}

void rampDOWN()
{
	cli();
	while (OCR0A > 0x00)
 184:	86 b7       	in	r24, 0x36	; 54
 186:	81 11       	cpse	r24, r1
 188:	f4 cf       	rjmp	.-24     	; 0x172 <_Z8rampDOWNv+0x8>
	{
		OCR0A--;
		_delay_ms(16);
	}
	DDRB &= ~(1 << PINB0);
 18a:	b8 98       	cbi	0x17, 0	; 23
	WDTCR |= (1 << WDTIE);
 18c:	81 b5       	in	r24, 0x21	; 33
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	81 bd       	out	0x21, r24	; 33
	sei();
 192:	78 94       	sei
	sleep();
 194:	c2 df       	rcall	.-124    	; 0x11a <_Z5sleepv>
 196:	08 95       	ret

00000198 <main>:
}


int main(void)
{
	setup();
 198:	57 df       	rcall	.-338    	; 0x48 <_Z5setupv>
	sei();
 19a:	78 94       	sei
 19c:	8f e0       	ldi	r24, 0x0F	; 15
 19e:	97 e2       	ldi	r25, 0x27	; 39
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x8>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0xe>
 1a6:	00 00       	nop
// 	OCR0A = 100;
// 	PORTB |= 1 << PINB0;
    while (1)
    {
	    _delay_ms(5);
		flips += sensorFlipped();
 1a8:	6b df       	rcall	.-298    	; 0x80 <_Z13sensorFlippedv>
 1aa:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <flips>
 1ae:	89 0f       	add	r24, r25
 1b0:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flips>
		if (flips > 6)
 1b4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flips>
 1b8:	87 30       	cpi	r24, 0x07	; 7
 1ba:	60 f0       	brcs	.+24     	; 0x1d4 <main+0x3c>
		{
			flips = 0;
 1bc:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <flips>
			secSleep = 0;
 1c0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <secSleep+0x1>
 1c4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <secSleep>
			OCR0A ? rampDOWN() : rampUP();
 1c8:	86 b7       	in	r24, 0x36	; 54
 1ca:	88 23       	and	r24, r24
 1cc:	11 f0       	breq	.+4      	; 0x1d2 <main+0x3a>
 1ce:	cd df       	rcall	.-102    	; 0x16a <_Z8rampDOWNv>
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <main+0x3c>
 1d2:	b5 df       	rcall	.-150    	; 0x13e <_Z6rampUPv>
		}
		if (secSleep > 120)
 1d4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <secSleep>
 1d8:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <secSleep+0x1>
 1dc:	89 37       	cpi	r24, 0x79	; 121
 1de:	91 05       	cpc	r25, r1
 1e0:	e8 f2       	brcs	.-70     	; 0x19c <main+0x4>
		{
			rampDOWN();
 1e2:	c3 df       	rcall	.-122    	; 0x16a <_Z8rampDOWNv>
 1e4:	db cf       	rjmp	.-74     	; 0x19c <main+0x4>

000001e6 <__vector_3>:
		}
    }
}

ISR (TIM0_OVF_vect) //Timer 0 overflow interrupt used for all the timing needs
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
	static uint8_t smallTimer = 0;
	smallTimer++;
 1f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
	if (smallTimer > 122)
 1fa:	8b 37       	cpi	r24, 0x7B	; 123
 1fc:	18 f4       	brcc	.+6      	; 0x204 <__vector_3+0x1e>
}

ISR (TIM0_OVF_vect) //Timer 0 overflow interrupt used for all the timing needs
{
	static uint8_t smallTimer = 0;
	smallTimer++;
 1fe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 202:	14 c0       	rjmp	.+40     	; 0x22c <__vector_3+0x46>
	if (smallTimer > 122)
	{
		smallTimer = 0;
 204:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		secSleep++;
 208:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <secSleep>
 20c:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <secSleep+0x1>
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <secSleep+0x1>
 216:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <secSleep>
		if (flips > 0) flips --;
 21a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flips>
 21e:	88 23       	and	r24, r24
 220:	29 f0       	breq	.+10     	; 0x22c <__vector_3+0x46>
 222:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flips>
 226:	81 50       	subi	r24, 0x01	; 1
 228:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flips>
	}
}
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <__vector_8>:

ISR (WDT_vect) //External interrupt used to wake from sleep
{
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	4f 93       	push	r20
 24a:	5f 93       	push	r21
 24c:	6f 93       	push	r22
 24e:	7f 93       	push	r23
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
	static uint8_t done = 10;
	if (PINB & PINB2)
 25c:	b1 9b       	sbis	0x16, 1	; 22
 25e:	09 c0       	rjmp	.+18     	; 0x272 <__vector_8+0x38>
	{
		if (done < 10) done++;
 260:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 264:	8a 30       	cpi	r24, 0x0A	; 10
 266:	18 f4       	brcc	.+6      	; 0x26e <__vector_8+0x34>
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		sleep();
 26e:	55 df       	rcall	.-342    	; 0x11a <_Z5sleepv>
		return;
 270:	0d c0       	rjmp	.+26     	; 0x28c <__vector_8+0x52>
	}
	else if (done >= 10)
 272:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 276:	8a 30       	cpi	r24, 0x0A	; 10
 278:	48 f0       	brcs	.+18     	; 0x28c <__vector_8+0x52>
	{
		done = 0;
 27a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		rampUP();
 27e:	5f df       	rcall	.-322    	; 0x13e <_Z6rampUPv>
		secSleep = 110;
 280:	8e e6       	ldi	r24, 0x6E	; 110
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <secSleep+0x1>
 288:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <secSleep>
	}
}
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	bf 91       	pop	r27
 292:	af 91       	pop	r26
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	7f 91       	pop	r23
 29a:	6f 91       	pop	r22
 29c:	5f 91       	pop	r21
 29e:	4f 91       	pop	r20
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_1>:


ISR (INT0_vect) //External interrupt used to wake from sleep
{
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
}
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
