
GccApplication21.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000274  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  0000030a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000648  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000046d  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003de  00000000  00000000  00000e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  0000124c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038e  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e9  00000000  00000000  0000165e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001847  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	2c c1       	rjmp	.+600    	; 0x25c <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	00 c1       	rjmp	.+512    	; 0x208 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e4 e7       	ldi	r30, 0x74	; 116
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 36       	cpi	r26, 0x68	; 104
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	60 d0       	rcall	.+192    	; 0x104 <main>
  44:	15 c1       	rjmp	.+554    	; 0x270 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <_Z5setupv>:
volatile uint16_t secSleep = 0;
	

void inline setup()
{
	DDRB = 0x00;
  48:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
  4a:	18 ba       	out	0x18, r1	; 24
	DDRB &= ~(1 << PINB1);											//I/O inputs
  4c:	b9 98       	cbi	0x17, 1	; 23
	PORTB |= 1 << PINB1;											//PULL UP RESISTOR for input
  4e:	c1 9a       	sbi	0x18, 1	; 24
	TCCR0A |= (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);			//PWM
  50:	8f b5       	in	r24, 0x2f	; 47
  52:	83 68       	ori	r24, 0x83	; 131
  54:	8f bd       	out	0x2f, r24	; 47
	TCCR0B |= 1 << CS02;											//PWM
  56:	83 b7       	in	r24, 0x33	; 51
  58:	84 60       	ori	r24, 0x04	; 4
  5a:	83 bf       	out	0x33, r24	; 51
	TIMSK0 |= 1 << TOIE0;											//Timer0 overflow interrupt
  5c:	89 b7       	in	r24, 0x39	; 57
  5e:	82 60       	ori	r24, 0x02	; 2
  60:	89 bf       	out	0x39, r24	; 57
	MCUCR |= (1 << SM1) | (1 << SE);								//Sleep mode selection
  62:	85 b7       	in	r24, 0x35	; 53
  64:	80 63       	ori	r24, 0x30	; 48
  66:	85 bf       	out	0x35, r24	; 53
  68:	08 95       	ret

0000006a <_Z13sensorFlippedv>:
	static uint8_t sensorIns = 0x00;
	static uint8_t i = 0;
	static bool sensorPos = 1;
	uint8_t sum = 0;
	
	if (PINB & (1 << PINB1))
  6a:	b1 9b       	sbis	0x16, 1	; 22
  6c:	0f c0       	rjmp	.+30     	; 0x8c <_Z13sensorFlippedv+0x22>
	{
		sensorIns |= 1 << i;
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	00 90 64 00 	lds	r0, 0x0064	; 0x800064 <_ZZ13sensorFlippedvE1i>
  76:	02 c0       	rjmp	.+4      	; 0x7c <_Z13sensorFlippedv+0x12>
  78:	88 0f       	add	r24, r24
  7a:	99 1f       	adc	r25, r25
  7c:	0a 94       	dec	r0
  7e:	e2 f7       	brpl	.-8      	; 0x78 <_Z13sensorFlippedv+0xe>
  80:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <_ZZ13sensorFlippedvE9sensorIns>
  84:	89 2b       	or	r24, r25
  86:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_ZZ13sensorFlippedvE9sensorIns>
  8a:	0f c0       	rjmp	.+30     	; 0xaa <__stack+0xb>
	}
	else
	{
		sensorIns &= ~(1 << i);
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	00 90 64 00 	lds	r0, 0x0064	; 0x800064 <_ZZ13sensorFlippedvE1i>
  94:	02 c0       	rjmp	.+4      	; 0x9a <_Z13sensorFlippedv+0x30>
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	0a 94       	dec	r0
  9c:	e2 f7       	brpl	.-8      	; 0x96 <_Z13sensorFlippedv+0x2c>
  9e:	80 95       	com	r24
  a0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <_ZZ13sensorFlippedvE9sensorIns>
  a4:	89 23       	and	r24, r25
  a6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_ZZ13sensorFlippedvE9sensorIns>
	}
	i < 7? i++ : i=0;
  aa:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZZ13sensorFlippedvE1i>
  ae:	87 30       	cpi	r24, 0x07	; 7
  b0:	20 f4       	brcc	.+8      	; 0xba <__stack+0x1b>
  b2:	8f 5f       	subi	r24, 0xFF	; 255
  b4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZZ13sensorFlippedvE1i>
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__stack+0x1f>
  ba:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZZ13sensorFlippedvE1i>
	
	for (uint8_t j=0; j<8; ++j)
	{
		sum += (sensorIns >> j) & 0x01;
  be:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <_ZZ13sensorFlippedvE9sensorIns>
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
bool sensorFlipped()												//Gets a new sensor sample and checks if it is flipped through rolling mean
{
	static uint8_t sensorIns = 0x00;
	static uint8_t i = 0;
	static bool sensorPos = 1;
	uint8_t sum = 0;
  c8:	40 e0       	ldi	r20, 0x00	; 0
	}
	i < 7? i++ : i=0;
	
	for (uint8_t j=0; j<8; ++j)
	{
		sum += (sensorIns >> j) & 0x01;
  ca:	9b 01       	movw	r18, r22
  cc:	08 2e       	mov	r0, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__stack+0x35>
  d0:	35 95       	asr	r19
  d2:	27 95       	ror	r18
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <__stack+0x31>
  d8:	21 70       	andi	r18, 0x01	; 1
  da:	42 0f       	add	r20, r18
  dc:	01 96       	adiw	r24, 0x01	; 1
	{
		sensorIns &= ~(1 << i);
	}
	i < 7? i++ : i=0;
	
	for (uint8_t j=0; j<8; ++j)
  de:	88 30       	cpi	r24, 0x08	; 8
  e0:	91 05       	cpc	r25, r1
  e2:	99 f7       	brne	.-26     	; 0xca <__stack+0x2b>
	{
		sum += (sensorIns >> j) & 0x01;
	}
	
	if ((sensorPos && sum<3) || (!sensorPos && sum>6))
  e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e8:	88 23       	and	r24, r24
  ea:	21 f0       	breq	.+8      	; 0xf4 <__stack+0x55>
  ec:	43 30       	cpi	r20, 0x03	; 3
  ee:	20 f0       	brcs	.+8      	; 0xf8 <__stack+0x59>
	{
		sensorPos = !sensorPos;
		return true;
	}
	else
		return false;
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	08 95       	ret
	for (uint8_t j=0; j<8; ++j)
	{
		sum += (sensorIns >> j) & 0x01;
	}
	
	if ((sensorPos && sum<3) || (!sensorPos && sum>6))
  f4:	47 30       	cpi	r20, 0x07	; 7
  f6:	28 f0       	brcs	.+10     	; 0x102 <__stack+0x63>
	{
		sensorPos = !sensorPos;
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	89 27       	eor	r24, r25
  fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		return true;
 100:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return false;
}
 102:	08 95       	ret

00000104 <main>:
}


int main(void)
{
	setup();
 104:	a1 df       	rcall	.-190    	; 0x48 <_Z5setupv>
	sei();
 106:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	8f e0       	ldi	r24, 0x0F	; 15
 10a:	97 e2       	ldi	r25, 0x27	; 39
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x8>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0xe>
 112:	00 00       	nop
    while (1)
    {
	    _delay_ms(5);
		flips += sensorFlipped();
 114:	aa df       	rcall	.-172    	; 0x6a <_Z13sensorFlippedv>
 116:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <flips>
 11a:	89 0f       	add	r24, r25
 11c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flips>
		if (flips > 6)
 120:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flips>
 124:	87 30       	cpi	r24, 0x07	; 7
 126:	d8 f1       	brcs	.+118    	; 0x19e <main+0x9a>
		{
			flips = 0;
 128:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <flips>
			secSleep = 0;
 12c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <secSleep+0x1>
 130:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <secSleep>
			OCR0A ? rampDOWN() : rampUP();
 134:	86 b7       	in	r24, 0x36	; 54
 136:	88 23       	and	r24, r24
 138:	11 f1       	breq	.+68     	; 0x17e <main+0x7a>
	}
}

inline void rampDOWN()
{
	while (OCR0A > 0x00)
 13a:	86 b7       	in	r24, 0x36	; 54
 13c:	88 23       	and	r24, r24
 13e:	61 f0       	breq	.+24     	; 0x158 <main+0x54>
	{
		OCR0A--;
 140:	86 b7       	in	r24, 0x36	; 54
 142:	81 50       	subi	r24, 0x01	; 1
 144:	86 bf       	out	0x36, r24	; 54
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	9c e7       	ldi	r25, 0x7C	; 124
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x46>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x4c>
 150:	00 00       	nop
	}
}

inline void rampDOWN()
{
	while (OCR0A > 0x00)
 152:	86 b7       	in	r24, 0x36	; 54
 154:	81 11       	cpse	r24, r1
 156:	f4 cf       	rjmp	.-24     	; 0x140 <main+0x3c>
	{
		OCR0A--;
		_delay_ms(16);
	}
	DDRB &= ~(1 << PINB0);
 158:	b8 98       	cbi	0x17, 0	; 23
		return false;
}

inline void sleep()
{
	secSleep = 0;
 15a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <secSleep+0x1>
 15e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <secSleep>
	GIMSK |= 1 << INT0;			//Enable external interrupt for awakening
 162:	8b b7       	in	r24, 0x3b	; 59
 164:	80 64       	ori	r24, 0x40	; 64
 166:	8b bf       	out	0x3b, r24	; 59
	sleep_mode();
 168:	85 b7       	in	r24, 0x35	; 53
 16a:	80 62       	ori	r24, 0x20	; 32
 16c:	85 bf       	out	0x35, r24	; 53
 16e:	88 95       	sleep
 170:	85 b7       	in	r24, 0x35	; 53
 172:	8f 7d       	andi	r24, 0xDF	; 223
 174:	85 bf       	out	0x35, r24	; 53
	GIMSK &= ~(1 << INT0);		//Disable external interrupt after awakening
 176:	8b b7       	in	r24, 0x3b	; 59
 178:	8f 7b       	andi	r24, 0xBF	; 191
 17a:	8b bf       	out	0x3b, r24	; 59
 17c:	10 c0       	rjmp	.+32     	; 0x19e <main+0x9a>
}

inline void rampUP()
{
	DDRB |= 1 << PINB0;
 17e:	b8 9a       	sbi	0x17, 0	; 23
	while (OCR0A < 0xff)
 180:	86 b7       	in	r24, 0x36	; 54
 182:	8f 3f       	cpi	r24, 0xFF	; 255
 184:	61 f0       	breq	.+24     	; 0x19e <main+0x9a>
	{
		OCR0A++;
 186:	86 b7       	in	r24, 0x36	; 54
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	86 bf       	out	0x36, r24	; 54
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	9c e7       	ldi	r25, 0x7C	; 124
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x8c>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x92>
 196:	00 00       	nop
}

inline void rampUP()
{
	DDRB |= 1 << PINB0;
	while (OCR0A < 0xff)
 198:	86 b7       	in	r24, 0x36	; 54
 19a:	8f 3f       	cpi	r24, 0xFF	; 255
 19c:	a1 f7       	brne	.-24     	; 0x186 <main+0x82>
		{
			flips = 0;
			secSleep = 0;
			OCR0A ? rampDOWN() : rampUP();
		}
		if (secSleep > 120 || (secSleep > 10 && !OCR0A))
 19e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <secSleep>
 1a2:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <secSleep+0x1>
 1a6:	89 37       	cpi	r24, 0x79	; 121
 1a8:	91 05       	cpc	r25, r1
 1aa:	50 f5       	brcc	.+84     	; 0x200 <main+0xfc>
 1ac:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <secSleep>
 1b0:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <secSleep+0x1>
 1b4:	0b 97       	sbiw	r24, 0x0b	; 11
 1b6:	08 f4       	brcc	.+2      	; 0x1ba <main+0xb6>
 1b8:	a7 cf       	rjmp	.-178    	; 0x108 <main+0x4>
 1ba:	86 b7       	in	r24, 0x36	; 54
 1bc:	81 11       	cpse	r24, r1
 1be:	a4 cf       	rjmp	.-184    	; 0x108 <main+0x4>
 1c0:	1f c0       	rjmp	.+62     	; 0x200 <main+0xfc>

inline void rampDOWN()
{
	while (OCR0A > 0x00)
	{
		OCR0A--;
 1c2:	86 b7       	in	r24, 0x36	; 54
 1c4:	81 50       	subi	r24, 0x01	; 1
 1c6:	86 bf       	out	0x36, r24	; 54
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	9c e7       	ldi	r25, 0x7C	; 124
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0xc8>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0xce>
 1d2:	00 00       	nop
	}
}

inline void rampDOWN()
{
	while (OCR0A > 0x00)
 1d4:	86 b7       	in	r24, 0x36	; 54
 1d6:	81 11       	cpse	r24, r1
 1d8:	f4 cf       	rjmp	.-24     	; 0x1c2 <main+0xbe>
	{
		OCR0A--;
		_delay_ms(16);
	}
	DDRB &= ~(1 << PINB0);
 1da:	b8 98       	cbi	0x17, 0	; 23
		return false;
}

inline void sleep()
{
	secSleep = 0;
 1dc:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <secSleep+0x1>
 1e0:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <secSleep>
	GIMSK |= 1 << INT0;			//Enable external interrupt for awakening
 1e4:	8b b7       	in	r24, 0x3b	; 59
 1e6:	80 64       	ori	r24, 0x40	; 64
 1e8:	8b bf       	out	0x3b, r24	; 59
	sleep_mode();
 1ea:	85 b7       	in	r24, 0x35	; 53
 1ec:	80 62       	ori	r24, 0x20	; 32
 1ee:	85 bf       	out	0x35, r24	; 53
 1f0:	88 95       	sleep
 1f2:	85 b7       	in	r24, 0x35	; 53
 1f4:	8f 7d       	andi	r24, 0xDF	; 223
 1f6:	85 bf       	out	0x35, r24	; 53
	GIMSK &= ~(1 << INT0);		//Disable external interrupt after awakening
 1f8:	8b b7       	in	r24, 0x3b	; 59
 1fa:	8f 7b       	andi	r24, 0xBF	; 191
 1fc:	8b bf       	out	0x3b, r24	; 59
 1fe:	84 cf       	rjmp	.-248    	; 0x108 <main+0x4>
	}
}

inline void rampDOWN()
{
	while (OCR0A > 0x00)
 200:	86 b7       	in	r24, 0x36	; 54
 202:	81 11       	cpse	r24, r1
 204:	de cf       	rjmp	.-68     	; 0x1c2 <main+0xbe>
 206:	e9 cf       	rjmp	.-46     	; 0x1da <main+0xd6>

00000208 <__vector_3>:
		}
    }
}

ISR (TIM0_OVF_vect) //Timer 0 overflow interrupt used for all the timing needs
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
	static uint8_t smallTimer = 0;
	smallTimer++;
 216:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 21a:	8f 5f       	subi	r24, 0xFF	; 255
	if (smallTimer > 122)
 21c:	8b 37       	cpi	r24, 0x7B	; 123
 21e:	18 f4       	brcc	.+6      	; 0x226 <__vector_3+0x1e>
}

ISR (TIM0_OVF_vect) //Timer 0 overflow interrupt used for all the timing needs
{
	static uint8_t smallTimer = 0;
	smallTimer++;
 220:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 224:	14 c0       	rjmp	.+40     	; 0x24e <__vector_3+0x46>
	if (smallTimer > 122)
	{
		smallTimer = 0;
 226:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		secSleep++;
 22a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <secSleep>
 22e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <secSleep+0x1>
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <secSleep+0x1>
 238:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <secSleep>
		if (flips > 0) flips --;
 23c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flips>
 240:	88 23       	and	r24, r24
 242:	29 f0       	breq	.+10     	; 0x24e <__vector_3+0x46>
 244:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flips>
 248:	81 50       	subi	r24, 0x01	; 1
 24a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flips>
	}
}
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <__vector_1>:

ISR (INT0_vect) //External interrupt used to wake from sleep
{
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
